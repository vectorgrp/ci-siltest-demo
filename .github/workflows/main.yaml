name: call-workflow

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  checks: write
  contents: read

jobs:
  build-sut:
    name: Build SUT
    runs-on: vtt
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache SUT
        id: cache-sut
        uses: actions/cache@v4
        with:
          path: |
            ./ECU/SUT
          key: ${{ hashFiles('./ECU/**') }}

      - name: Cache BSW
        id: cache-bsw
        uses: actions/cache@v4
        with:
          path: |
            ./ECU/Appl/GenDataVTT
          key: ${{ hashFiles('./ECU/LightControl.dpa','./ECU/Config') }}

      - name: Run DaVinci & vVIRTUALtarget
        if: steps.cache-sut.outputs.cache-hit != 'true'
        env:
          cacheBSW: ${{ steps.cache-bsw.outputs.cache-hit }}
        run: |
          if ($env:cacheBSW -ne 'true'){
            VttMake make ./ECU/LightControl.vttmake;
          }
          else {
            VttMake make ./ECU/LightControl.vttmake --excludeDVCfgCmd;
          }
          if(-Not $?)
          {
            Write-Host "VttMake step failed." -ForegroundColor red
            Exit -1
          }

      - name: Export ECU/SUT
        uses: actions/upload-artifact@v4
        with:
          name: SUT
          path: ./ECU/SUT
          retention-days: 7

      - name: Check DLL
        run : ls ECU/SUT/

  build-simulation:
    name: Build simulation
    needs: [build-sut]
    runs-on: canoe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch SUT Artifact
        uses: actions/download-artifact@v4
        with:
          name: SUT
          path: ECU/SUT

      - name: Make environment
        run: |
            environment-make -o ./compiled-environment-and-tests -A Win32 ./environment-make/venvironment.yaml;

      - name: Make test units
        run: |
            test-unit-make -e ./compiled-environment-and-tests/Default.venvironment -o ./compiled-environment-and-tests/ ./test/auto/auto.vtestunit.yaml ./test/basic/basic.vtestunit.yaml;
      - name: Export compiled-environment-and-tests
        uses: actions/upload-artifact@v4
        with:
          name: compiled-environment-and-tests
          path: ./compiled-environment-and-tests/
          retention-days: 7

  run-tests-simulation:
    name: Run simulation
    needs: build-simulation
    runs-on: canoe
    strategy:
      matrix:
        TESTNAME: [auto, basic]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch SUT Artifact
        uses: actions/download-artifact@v4
        with:
          name: SUT
          path: ECU/SUT

      - name: Fetch compiled-environment-and-tests artifact
        uses: actions/download-artifact@v4
        with:
          name: compiled-environment-and-tests
          path: compiled-environment-and-tests

      - name: Run CANoe4SW Server Edition
        id: canoe4swse
        run: |
          & canoe4sw-se ./compiled-environment-and-tests/Default.venvironment -d ./simulation --win32 --port-rtk-api none --test-unit ./compiled-environment-and-tests/${{ matrix.TESTNAME }}.vtestunit;
          Write-Host "CANoe4SW Server Edition returned exit code $LASTEXITCODE"

      - name: Export Test Reports
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test Reports ${{ matrix.TESTNAME }}
          path: |
            ./simulation/TestReports/
          retention-days: 7

      - name: Upload Log Files
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: Log Files ${{ matrix.TESTNAME }}
          path: ./simulation/*.txt

  display-test-report:
    name: Display test report
    if: ${{ !cancelled() }}
    needs: run-tests-simulation
    runs-on: canoe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch testreport auto artifact
        uses: actions/download-artifact@v4
        with:
          name: Test Reports auto
          path: ./simulation/TestReports/

      - name: Fetch testreport basic artifact
        uses: actions/download-artifact@v4
        with:
          name: Test Reports basic
          path: ./simulation/TestReports/
        env:
          http_proxy: ""
          https_proxy: ""

      - name: Convert all test reports to XUnit format
        working-directory: ./simulation/TestReports/
        run: |
          get-childitem . -Filter *.vtestreport | foreach {
            $vtestreportfile = $_.Name
            $xunitfile = "$($_.basename).xml"
            write-host "Converting $vtestreportfile to $xunitfile"
            ReportViewerCli -r $vtestreportfile -xu $xunitfile
          }

      - name: Display test results
        uses: dorny/test-reporter@v1.9.1
        with:
          fail-on-error: "false"
          name: Test results                             # Name of the check run which will be created
          path: "./simulation/TestReports/*_xunit.xml"   # Path to test results
          reporter: java-junit                           # Format of test results
